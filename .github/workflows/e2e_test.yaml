name: e2e_test on e2e-test branch

on:
  workflow_dispatch:
    branch: e2e-test

jobs:
  # Runs dart lint rules and unit tests on at_persistence_root_server
  test_at_persistence_root_server:
    env:
      working-directory: ./at_root/at_persistence_root_server
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install dependencies in at_persistence_root_server
        working-directory: ${{ env.working-directory }}
        run: dart pub get

      - name: Run dart analyzer in at_persistence_root_server
        working-directory: ${{ env.working-directory }}
        run: dart analyze

      - name: Run tests in at_persistence_root_server
        working-directory: ${{ env.working-directory }}
        run: dart test --concurrency=1

  # Runs dart lint rules and unit tests on at_root_server
  test_at_root_server:
    env:
      working-directory: ./at_root/at_root_server
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install dependencies in at_root_server
        working-directory: ${{ env.working-directory }}
        run: dart pub get

      - name: Run dart analyzer in at_root_server
        working-directory: ${{ env.working-directory }}
        run: dart analyze

      - name: Run tests in at_root_server
        working-directory: ${{ env.working-directory }}
        run: dart test --concurrency=1

  # Runs dart lint rules and unit tests on at_persistence_secondary_server
  test_at_persistence_secondary_server:
    runs-on: ubuntu-latest
    env:
      working-directory: ./at_secondary/at_persistence_secondary_server
    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      # Setup python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # Install python packages
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install ruamel.yaml

      # adds dependency overrides to pubspec.yaml
      # Runs when github action event type is pull_request or push event to trunk branch
      - name: Add dependency overrides on pull request
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' && contains(github.ref, 'trunk') }}
        run: |
          chmod +x add_dependency_overrides.py
          python3 add_dependency_overrides.py -p at_secondary/at_persistence_secondary_server

      - name: Install dependencies in at_persistence_secondary_server
        working-directory: ${{ env.working-directory }}
        run: dart pub get

      - name: Run dart analyzer in at_persistence_secondary_server
        working-directory: ${{ env.working-directory }}
        run: dart analyze

      - name: Run tests in at_persistence_secondary_server
        working-directory: ${{ env.working-directory }}
        run: dart test --concurrency=1

  # Runs dart lint rules and unit tests on at_secondary_server
  test_at_secondary_server:
    runs-on: ubuntu-latest
    env:
      working-directory: ./at_secondary/at_secondary_server
    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      # Setup python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # Install python packages
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install ruamel.yaml

      # adds dependency overrides to pubspec.yaml
      # Runs when github action event type is pull_request or push event to trunk branch
      - name: Add dependency overrides on pull request
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' && contains(github.ref, 'trunk') }}
        run: |
          chmod +x add_dependency_overrides.py
          python3 add_dependency_overrides.py -p at_secondary/at_secondary_server

      - name: Install dependencies in at_secondary_server
        working-directory: ${{ env.working-directory }}
        run: dart pub get

      - name: Run dart analyzer in at_secondary_server
        working-directory: ${{ env.working-directory }}
        run: dart analyze

      - name: Run tests in at_secondary_server
        working-directory: ${{ env.working-directory }}
        run: dart test --concurrency=1

  # On completed of above jobs, runs functional tests on at_secondary.
  # If tests are successful, uploads root server and secondary server binaries for subsequent jobs
  run_functional_test:
    needs: [ test_at_persistence_root_server, test_at_root_server, test_at_persistence_secondary_server, test_at_secondary_server ]
    env:
      working-directory: at_server
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      # Setup python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        working-directory: at_functional_test
        run: dart pub get

      - name: Run dart analyzer
        working-directory: at_functional_test
        run: dart analyze

      - name: Add entry to hosts file
        run: echo "127.0.0.1    vip.ve.atsign.zone" | sudo tee -a /etc/hosts

      - name: Generate root server binary
        working-directory: at_root/at_root_server
        # -o : path to copy the root binary
        run: dart pub get && dart compile exe bin/main.dart -o root

      # Runs when github action event is pull_request or push to a trunk branch.
      - name: Add dependency overrides on pull request
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' && contains(github.ref, 'trunk')}}
        run: |
          python3 -m pip install --upgrade pip
          pip3 install ruamel.yaml
          chmod +x add_dependency_overrides.py
          python3 add_dependency_overrides.py -p at_secondary/at_secondary_server

      - name: Generate secondary server binary
        working-directory: at_secondary/at_secondary_server
        run: dart pub get && dart compile exe bin/main.dart -o secondary

      - name: copy binaries to at_functional_test
        run: cp at_root/at_root_server/root at_functional_test/lib/root/ && cp at_secondary/at_secondary_server/secondary at_functional_test/lib/secondary/

      - name: Build docker image
        uses: docker/build-push-action@v2
        with:
          file: at_functional_test/lib/Dockerfile
          context: at_functional_test/lib/
          tags: at_virtual_env:trunk

      - name: Run docker container
        # -d: run container in detached mode. --rm: remove container on stop -p: bind ports to host
        run: docker container run -d --rm --name at_virtual_env_cont -p 6379:6379 -p 25000-25017:25000-25017 -p 64:64 at_virtual_env:trunk

      - name: Check test environment readiness
        working-directory: at_functional_test
        run: dart run test/check_test_env.dart

      - name: Run tests
        working-directory: at_functional_test
        run: pub run test

      # On push event, upload root server binary for using in deploy job
      - name: upload root server
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v2
        with:
          name: root-server
          path: at_root/at_root_server/root

      # Upload secondary server binary for using in deploy job
      - name: upload secondary server

        uses: actions/upload-artifact@v2
        with:
          name: secondary-server
          path: at_secondary/at_secondary_server/secondary

      - name: Stop docker container
        run: docker container stop at_virtual_env_cont

      # Remove image created for at_virtual_env:trunk for running functional tests in pipeline.
      - name: Remove docker image
        run: docker rmi at_virtual_env:trunk

  # The job builds the cicd version of secondary server image and pushes to GitHub registry
  run_end2end_tests:
    # Runs only after functional tests are completed.
    needs: [ run_functional_test ]
    env:
      working-directory: at_server
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      # Extract branch for docker tag

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.5.0

      - name: Login to DockerHub
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Gets the secondary server binary generated from the above "secondary" job.
      - name: Get secondary server
        uses: actions/download-artifact@v2
        with:
          name: secondary-server
          path: at_secondary/at_secondary_server

      # Builds and pushes the secondary server image to docker hub.
      - name: Build and push secondary image for arm64
        id: docker_build_secondary
        uses: docker/build-push-action@v2.6.1
        with:
          push: true
          context: at_secondary
          tags: |
            atsigncompany/secondary:dess_cicd
            atsigncompany/secondary:cicd-${{ env.BRANCH }}-gha${{ github.run_number }}
          platforms: |
            linux/arm64/v8

      # Logs into CICD VMs and runs script to update to just pushed image
      - name: update image on cicd VMs
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: "cicd1.atsign.wtf,cicd2.atsign.wtf"
          username: ubuntu
          key: ${{ secrets.CICD_SSH_KEY }}
          script: |
            ./update_image.sh

      - name: Install dependencies
        working-directory: at_functional_test
        run: dart pub get

      # Create demo_data.dart from CICD_DATA_DART secret
      - name: Get CICD keys into place
        run: echo "${{secrets.CICD_DATA_DART}}" > at_functional_test/test/at_demo_data.dart

